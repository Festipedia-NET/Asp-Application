

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class TickettypesPerFestival : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the TickettypesPerFestival entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TickettypesPerFestival()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TickettypesPerFestival(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.TickettypesPerFestival> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestival_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestival_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int fest_id
        {
            get
            {
                return global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.GetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.fest_id);
            }
            set
            {
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.SetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.fest_id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void fest_id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void fest_id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void fest_id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int typ_id
        {
            get
            {
                return global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.GetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.typ_id);
            }
            set
            {
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.SetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.typ_id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void typ_id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void typ_id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void typ_id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int aantal
        {
            get
            {
                return global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.GetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.aantal);
            }
            set
            {
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.SetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.aantal, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void aantal_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void aantal_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void aantal_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Festival Festival
        {
            get
            {
                return global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.GetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Festival);
            }
            set
            {
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.SetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Festival, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festival_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festival_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festival_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Tickettype Tickettype
        {
            get
            {
                return global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.GetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Tickettype);
            }
            set
            {
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.SetValue(this, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Tickettype, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettype_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettype_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettype_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.TickettypesPerFestival,
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass,
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.IImplementation,
                global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.fest_id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass>.Entry
                __TickettypesPerFestivalEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass>.Entry(
                    global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.__TickettypesPerFestival_CreateNew,
                    global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.__TickettypesPerFestival_Created,
                    global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.__TickettypesPerFestival_AllowSaveWithErrors);
            private static global::LightSwitchApplication.TickettypesPerFestival __TickettypesPerFestival_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.TickettypesPerFestival> es)
            {
                return new global::LightSwitchApplication.TickettypesPerFestival(es);
            }
            private static void __TickettypesPerFestival_Created(global::LightSwitchApplication.TickettypesPerFestival e)
            {
                e.TickettypesPerFestival_Created();
            }
            private static bool __TickettypesPerFestival_AllowSaveWithErrors(global::LightSwitchApplication.TickettypesPerFestival e)
            {
                bool result = false;
                e.TickettypesPerFestival_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int> fest_id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.fest_id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int> typ_id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.typ_id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int> aantal
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.aantal) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Festival> Festival
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Festival) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Festival>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Tickettype> Tickettype
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Tickettype) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Tickettype>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int fest_id { get; set; }
                new int typ_id { get; set; }
                new int aantal { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Festival { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Tickettype { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Entry
                    fest_id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Entry(
                        "fest_id",
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._fest_id_Stub,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._fest_id_ComputeIsReadOnly,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._fest_id_Validate,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._fest_id_GetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._fest_id_SetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._fest_id_OnValueChanged);
                private static void _fest_id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Data> c, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, object sf)
                {
                    c(d, ref d._fest_id, sf);
                }
                private static bool _fest_id_ComputeIsReadOnly(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    bool result = false;
                    e.fest_id_IsReadOnly(ref result);
                    return result;
                }
                private static void _fest_id_Validate(global::LightSwitchApplication.TickettypesPerFestival e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.fest_id_Validate(r);
                }
                private static int _fest_id_GetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.ImplementationEntity.fest_id;
                }
                private static void _fest_id_SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, int v)
                {
                    d.ImplementationEntity.fest_id = v;
                }
                private static void _fest_id_OnValueChanged(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    e.fest_id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Entry
                    typ_id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Entry(
                        "typ_id",
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._typ_id_Stub,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._typ_id_ComputeIsReadOnly,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._typ_id_Validate,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._typ_id_GetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._typ_id_SetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._typ_id_OnValueChanged);
                private static void _typ_id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Data> c, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, object sf)
                {
                    c(d, ref d._typ_id, sf);
                }
                private static bool _typ_id_ComputeIsReadOnly(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    bool result = false;
                    e.typ_id_IsReadOnly(ref result);
                    return result;
                }
                private static void _typ_id_Validate(global::LightSwitchApplication.TickettypesPerFestival e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.typ_id_Validate(r);
                }
                private static int _typ_id_GetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.ImplementationEntity.typ_id;
                }
                private static void _typ_id_SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, int v)
                {
                    d.ImplementationEntity.typ_id = v;
                }
                private static void _typ_id_OnValueChanged(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    e.typ_id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Entry
                    aantal = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Entry(
                        "aantal",
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._aantal_Stub,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._aantal_ComputeIsReadOnly,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._aantal_Validate,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._aantal_GetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._aantal_SetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._aantal_OnValueChanged);
                private static void _aantal_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Data> c, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, object sf)
                {
                    c(d, ref d._aantal, sf);
                }
                private static bool _aantal_ComputeIsReadOnly(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    bool result = false;
                    e.aantal_IsReadOnly(ref result);
                    return result;
                }
                private static void _aantal_Validate(global::LightSwitchApplication.TickettypesPerFestival e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.aantal_Validate(r);
                }
                private static int _aantal_GetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.ImplementationEntity.aantal;
                }
                private static void _aantal_SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, int v)
                {
                    d.ImplementationEntity.aantal = v;
                }
                private static void _aantal_OnValueChanged(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    e.aantal_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Festival>.Entry
                    Festival = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Festival>.Entry(
                        "Festival",
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_Stub,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_ComputeIsReadOnly,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_Validate,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_GetCoreImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_GetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_SetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_Refresh,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Festival_OnValueChanged);
                private static void _Festival_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Festival>.Data> c, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, object sf)
                {
                    c(d, ref d._Festival, sf);
                }
                private static bool _Festival_ComputeIsReadOnly(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    bool result = false;
                    e.Festival_IsReadOnly(ref result);
                    return result;
                }
                private static void _Festival_Validate(global::LightSwitchApplication.TickettypesPerFestival e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Festival_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Festival_GetCoreImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.ImplementationEntity.Festival;
                }
                private static global::LightSwitchApplication.Festival _Festival_GetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Festival, global::LightSwitchApplication.Festival.DetailsClass>(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Festival, ref d._Festival);
                }
                private static void _Festival_SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, global::LightSwitchApplication.Festival v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Festival, ref d._Festival, (i, ev) => i.Festival = ev, v);
                }
                private static void _Festival_Refresh(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Festival, ref d._Festival);
                }
                private static void _Festival_OnValueChanged(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    e.Festival_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Tickettype>.Entry
                    Tickettype = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Tickettype>.Entry(
                        "Tickettype",
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_Stub,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_ComputeIsReadOnly,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_Validate,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_GetCoreImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_GetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_SetImplementationValue,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_Refresh,
                        global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties._Tickettype_OnValueChanged);
                private static void _Tickettype_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Tickettype>.Data> c, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, object sf)
                {
                    c(d, ref d._Tickettype, sf);
                }
                private static bool _Tickettype_ComputeIsReadOnly(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    bool result = false;
                    e.Tickettype_IsReadOnly(ref result);
                    return result;
                }
                private static void _Tickettype_Validate(global::LightSwitchApplication.TickettypesPerFestival e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Tickettype_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Tickettype_GetCoreImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.ImplementationEntity.Tickettype;
                }
                private static global::LightSwitchApplication.Tickettype _Tickettype_GetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Tickettype, global::LightSwitchApplication.Tickettype.DetailsClass>(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Tickettype, ref d._Tickettype);
                }
                private static void _Tickettype_SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d, global::LightSwitchApplication.Tickettype v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Tickettype, ref d._Tickettype, (i, ev) => i.Tickettype = ev, v);
                }
                private static void _Tickettype_Refresh(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.TickettypesPerFestival.DetailsClass.PropertySetProperties.Tickettype, ref d._Tickettype);
                }
                private static void _Tickettype_OnValueChanged(global::LightSwitchApplication.TickettypesPerFestival e)
                {
                    e.Tickettype_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Data _fest_id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Data _typ_id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, int>.Data _aantal;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Festival>.Data _Festival;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.TickettypesPerFestival, global::LightSwitchApplication.TickettypesPerFestival.DetailsClass, global::LightSwitchApplication.Tickettype>.Data _Tickettype;
            
        }
    
        #endregion
    }
    
    #endregion
}
