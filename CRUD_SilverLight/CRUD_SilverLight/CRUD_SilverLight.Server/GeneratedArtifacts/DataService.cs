//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the groep15_festivalsData datasource.
    /// </summary>
    public sealed partial class groep15_festivalsDataService
        : global::LightSwitchApplication.groep15_festivalsData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public groep15_festivalsDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Inserting(global::LightSwitchApplication.Band entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Inserted(global::LightSwitchApplication.Band entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Updating(global::LightSwitchApplication.Band entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Updated(global::LightSwitchApplication.Band entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Deleting(global::LightSwitchApplication.Band entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Deleted(global::LightSwitchApplication.Band entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Validate(global::LightSwitchApplication.Band entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Bands_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Band, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Inserting(global::LightSwitchApplication.BandsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Inserted(global::LightSwitchApplication.BandsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Updating(global::LightSwitchApplication.BandsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Updated(global::LightSwitchApplication.BandsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Deleting(global::LightSwitchApplication.BandsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Deleted(global::LightSwitchApplication.BandsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Validate(global::LightSwitchApplication.BandsPerFestival entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BandsPerFestivals_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.BandsPerFestival, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Inserting(global::LightSwitchApplication.Camping entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Inserted(global::LightSwitchApplication.Camping entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Updating(global::LightSwitchApplication.Camping entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Updated(global::LightSwitchApplication.Camping entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Deleting(global::LightSwitchApplication.Camping entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Deleted(global::LightSwitchApplication.Camping entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Validate(global::LightSwitchApplication.Camping entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Campings_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Camping, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Inserting(global::LightSwitchApplication.CampingsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Inserted(global::LightSwitchApplication.CampingsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Updating(global::LightSwitchApplication.CampingsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Updated(global::LightSwitchApplication.CampingsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Deleting(global::LightSwitchApplication.CampingsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Deleted(global::LightSwitchApplication.CampingsPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Validate(global::LightSwitchApplication.CampingsPerFestival entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CampingsPerFestivals_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.CampingsPerFestival, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Inserting(global::LightSwitchApplication.Faciliteiten entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Inserted(global::LightSwitchApplication.Faciliteiten entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Updating(global::LightSwitchApplication.Faciliteiten entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Updated(global::LightSwitchApplication.Faciliteiten entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Deleting(global::LightSwitchApplication.Faciliteiten entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Deleted(global::LightSwitchApplication.Faciliteiten entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Validate(global::LightSwitchApplication.Faciliteiten entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Faciliteitens_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Faciliteiten, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Inserting(global::LightSwitchApplication.FacPerCamp entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Inserted(global::LightSwitchApplication.FacPerCamp entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Updating(global::LightSwitchApplication.FacPerCamp entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Updated(global::LightSwitchApplication.FacPerCamp entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Deleting(global::LightSwitchApplication.FacPerCamp entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Deleted(global::LightSwitchApplication.FacPerCamp entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Validate(global::LightSwitchApplication.FacPerCamp entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FacPerCamps_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.FacPerCamp, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Inserting(global::LightSwitchApplication.Festival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Inserted(global::LightSwitchApplication.Festival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Updating(global::LightSwitchApplication.Festival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Updated(global::LightSwitchApplication.Festival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Deleting(global::LightSwitchApplication.Festival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Deleted(global::LightSwitchApplication.Festival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Validate(global::LightSwitchApplication.Festival entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festivals_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Festival, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Inserting(global::LightSwitchApplication.GeregistreerdeGebruiker entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Inserted(global::LightSwitchApplication.GeregistreerdeGebruiker entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Updating(global::LightSwitchApplication.GeregistreerdeGebruiker entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Updated(global::LightSwitchApplication.GeregistreerdeGebruiker entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Deleting(global::LightSwitchApplication.GeregistreerdeGebruiker entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Deleted(global::LightSwitchApplication.GeregistreerdeGebruiker entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Validate(global::LightSwitchApplication.GeregistreerdeGebruiker entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruikers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.GeregistreerdeGebruiker, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Inserting(global::LightSwitchApplication.Podia entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Inserted(global::LightSwitchApplication.Podia entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Updating(global::LightSwitchApplication.Podia entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Updated(global::LightSwitchApplication.Podia entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Deleting(global::LightSwitchApplication.Podia entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Deleted(global::LightSwitchApplication.Podia entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Validate(global::LightSwitchApplication.Podia entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Podias_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Podia, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Inserting(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Inserted(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Updating(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Updated(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Deleting(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Deleted(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Validate(global::LightSwitchApplication.sysdiagram entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.sysdiagram, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Inserting(global::LightSwitchApplication.Ticket entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Inserted(global::LightSwitchApplication.Ticket entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Updating(global::LightSwitchApplication.Ticket entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Updated(global::LightSwitchApplication.Ticket entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Deleting(global::LightSwitchApplication.Ticket entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Deleted(global::LightSwitchApplication.Ticket entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Validate(global::LightSwitchApplication.Ticket entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickets_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Ticket, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Inserting(global::LightSwitchApplication.Tickettype entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Inserted(global::LightSwitchApplication.Tickettype entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Updating(global::LightSwitchApplication.Tickettype entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Updated(global::LightSwitchApplication.Tickettype entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Deleting(global::LightSwitchApplication.Tickettype entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Deleted(global::LightSwitchApplication.Tickettype entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Validate(global::LightSwitchApplication.Tickettype entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettypes_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Tickettype, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Inserting(global::LightSwitchApplication.TickettypesPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Inserted(global::LightSwitchApplication.TickettypesPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Updating(global::LightSwitchApplication.TickettypesPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Updated(global::LightSwitchApplication.TickettypesPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Deleting(global::LightSwitchApplication.TickettypesPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Deleted(global::LightSwitchApplication.TickettypesPerFestival entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Validate(global::LightSwitchApplication.TickettypesPerFestival entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TickettypesPerFestivals_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.TickettypesPerFestival, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Band>
                __BandsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Band>(
                    "Bands",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Bands_Filter);
            private static bool __Bands_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Bands_CanInsert(ref result);
                return result;
            }
            private static bool __Bands_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Bands_CanUpdate(ref result);
                return result;
            }
            private static bool __Bands_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Bands_CanDelete(ref result);
                return result;
            }
            private static bool __Bands_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Bands_CanRead(ref result);
                return result;
            }
            private static void __Bands_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e)
            {
                d.Bands_Inserting(e);
            }
            private static void __Bands_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e)
            {
                d.Bands_Inserted(e);
            }
            private static void __Bands_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e)
            {
                d.Bands_Updating(e);
            }
            private static void __Bands_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e)
            {
                d.Bands_Updated(e);
            }
            private static void __Bands_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e)
            {
                d.Bands_Deleting(e);
            }
            private static void __Bands_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e)
            {
                d.Bands_Deleted(e);
            }
            private static void __Bands_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Band e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Bands_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Band, bool>> __Bands_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Band, bool>> filter = null;
                d.Bands_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.BandsPerFestival>
                __BandsPerFestivalsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.BandsPerFestival>(
                    "BandsPerFestivals",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__BandsPerFestivals_Filter);
            private static bool __BandsPerFestivals_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.BandsPerFestivals_CanInsert(ref result);
                return result;
            }
            private static bool __BandsPerFestivals_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.BandsPerFestivals_CanUpdate(ref result);
                return result;
            }
            private static bool __BandsPerFestivals_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.BandsPerFestivals_CanDelete(ref result);
                return result;
            }
            private static bool __BandsPerFestivals_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.BandsPerFestivals_CanRead(ref result);
                return result;
            }
            private static void __BandsPerFestivals_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e)
            {
                d.BandsPerFestivals_Inserting(e);
            }
            private static void __BandsPerFestivals_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e)
            {
                d.BandsPerFestivals_Inserted(e);
            }
            private static void __BandsPerFestivals_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e)
            {
                d.BandsPerFestivals_Updating(e);
            }
            private static void __BandsPerFestivals_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e)
            {
                d.BandsPerFestivals_Updated(e);
            }
            private static void __BandsPerFestivals_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e)
            {
                d.BandsPerFestivals_Deleting(e);
            }
            private static void __BandsPerFestivals_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e)
            {
                d.BandsPerFestivals_Deleted(e);
            }
            private static void __BandsPerFestivals_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.BandsPerFestival e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.BandsPerFestivals_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.BandsPerFestival, bool>> __BandsPerFestivals_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.BandsPerFestival, bool>> filter = null;
                d.BandsPerFestivals_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Camping>
                __CampingsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Camping>(
                    "Campings",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Campings_Filter);
            private static bool __Campings_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Campings_CanInsert(ref result);
                return result;
            }
            private static bool __Campings_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Campings_CanUpdate(ref result);
                return result;
            }
            private static bool __Campings_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Campings_CanDelete(ref result);
                return result;
            }
            private static bool __Campings_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Campings_CanRead(ref result);
                return result;
            }
            private static void __Campings_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e)
            {
                d.Campings_Inserting(e);
            }
            private static void __Campings_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e)
            {
                d.Campings_Inserted(e);
            }
            private static void __Campings_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e)
            {
                d.Campings_Updating(e);
            }
            private static void __Campings_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e)
            {
                d.Campings_Updated(e);
            }
            private static void __Campings_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e)
            {
                d.Campings_Deleting(e);
            }
            private static void __Campings_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e)
            {
                d.Campings_Deleted(e);
            }
            private static void __Campings_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Camping e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Campings_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Camping, bool>> __Campings_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Camping, bool>> filter = null;
                d.Campings_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.CampingsPerFestival>
                __CampingsPerFestivalsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.CampingsPerFestival>(
                    "CampingsPerFestivals",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__CampingsPerFestivals_Filter);
            private static bool __CampingsPerFestivals_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.CampingsPerFestivals_CanInsert(ref result);
                return result;
            }
            private static bool __CampingsPerFestivals_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.CampingsPerFestivals_CanUpdate(ref result);
                return result;
            }
            private static bool __CampingsPerFestivals_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.CampingsPerFestivals_CanDelete(ref result);
                return result;
            }
            private static bool __CampingsPerFestivals_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.CampingsPerFestivals_CanRead(ref result);
                return result;
            }
            private static void __CampingsPerFestivals_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e)
            {
                d.CampingsPerFestivals_Inserting(e);
            }
            private static void __CampingsPerFestivals_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e)
            {
                d.CampingsPerFestivals_Inserted(e);
            }
            private static void __CampingsPerFestivals_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e)
            {
                d.CampingsPerFestivals_Updating(e);
            }
            private static void __CampingsPerFestivals_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e)
            {
                d.CampingsPerFestivals_Updated(e);
            }
            private static void __CampingsPerFestivals_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e)
            {
                d.CampingsPerFestivals_Deleting(e);
            }
            private static void __CampingsPerFestivals_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e)
            {
                d.CampingsPerFestivals_Deleted(e);
            }
            private static void __CampingsPerFestivals_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.CampingsPerFestival e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.CampingsPerFestivals_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.CampingsPerFestival, bool>> __CampingsPerFestivals_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.CampingsPerFestival, bool>> filter = null;
                d.CampingsPerFestivals_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Faciliteiten>
                __FaciliteitensEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Faciliteiten>(
                    "Faciliteitens",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Faciliteitens_Filter);
            private static bool __Faciliteitens_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Faciliteitens_CanInsert(ref result);
                return result;
            }
            private static bool __Faciliteitens_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Faciliteitens_CanUpdate(ref result);
                return result;
            }
            private static bool __Faciliteitens_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Faciliteitens_CanDelete(ref result);
                return result;
            }
            private static bool __Faciliteitens_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Faciliteitens_CanRead(ref result);
                return result;
            }
            private static void __Faciliteitens_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e)
            {
                d.Faciliteitens_Inserting(e);
            }
            private static void __Faciliteitens_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e)
            {
                d.Faciliteitens_Inserted(e);
            }
            private static void __Faciliteitens_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e)
            {
                d.Faciliteitens_Updating(e);
            }
            private static void __Faciliteitens_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e)
            {
                d.Faciliteitens_Updated(e);
            }
            private static void __Faciliteitens_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e)
            {
                d.Faciliteitens_Deleting(e);
            }
            private static void __Faciliteitens_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e)
            {
                d.Faciliteitens_Deleted(e);
            }
            private static void __Faciliteitens_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Faciliteiten e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Faciliteitens_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Faciliteiten, bool>> __Faciliteitens_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Faciliteiten, bool>> filter = null;
                d.Faciliteitens_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.FacPerCamp>
                __FacPerCampsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.FacPerCamp>(
                    "FacPerCamps",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__FacPerCamps_Filter);
            private static bool __FacPerCamps_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.FacPerCamps_CanInsert(ref result);
                return result;
            }
            private static bool __FacPerCamps_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.FacPerCamps_CanUpdate(ref result);
                return result;
            }
            private static bool __FacPerCamps_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.FacPerCamps_CanDelete(ref result);
                return result;
            }
            private static bool __FacPerCamps_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.FacPerCamps_CanRead(ref result);
                return result;
            }
            private static void __FacPerCamps_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e)
            {
                d.FacPerCamps_Inserting(e);
            }
            private static void __FacPerCamps_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e)
            {
                d.FacPerCamps_Inserted(e);
            }
            private static void __FacPerCamps_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e)
            {
                d.FacPerCamps_Updating(e);
            }
            private static void __FacPerCamps_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e)
            {
                d.FacPerCamps_Updated(e);
            }
            private static void __FacPerCamps_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e)
            {
                d.FacPerCamps_Deleting(e);
            }
            private static void __FacPerCamps_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e)
            {
                d.FacPerCamps_Deleted(e);
            }
            private static void __FacPerCamps_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.FacPerCamp e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.FacPerCamps_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.FacPerCamp, bool>> __FacPerCamps_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.FacPerCamp, bool>> filter = null;
                d.FacPerCamps_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Festival>
                __FestivalsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Festival>(
                    "Festivals",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Festivals_Filter);
            private static bool __Festivals_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Festivals_CanInsert(ref result);
                return result;
            }
            private static bool __Festivals_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Festivals_CanUpdate(ref result);
                return result;
            }
            private static bool __Festivals_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Festivals_CanDelete(ref result);
                return result;
            }
            private static bool __Festivals_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Festivals_CanRead(ref result);
                return result;
            }
            private static void __Festivals_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e)
            {
                d.Festivals_Inserting(e);
            }
            private static void __Festivals_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e)
            {
                d.Festivals_Inserted(e);
            }
            private static void __Festivals_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e)
            {
                d.Festivals_Updating(e);
            }
            private static void __Festivals_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e)
            {
                d.Festivals_Updated(e);
            }
            private static void __Festivals_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e)
            {
                d.Festivals_Deleting(e);
            }
            private static void __Festivals_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e)
            {
                d.Festivals_Deleted(e);
            }
            private static void __Festivals_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Festival e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Festivals_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Festival, bool>> __Festivals_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Festival, bool>> filter = null;
                d.Festivals_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.GeregistreerdeGebruiker>
                __GeregistreerdeGebruikersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.GeregistreerdeGebruiker>(
                    "GeregistreerdeGebruikers",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__GeregistreerdeGebruikers_Filter);
            private static bool __GeregistreerdeGebruikers_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.GeregistreerdeGebruikers_CanInsert(ref result);
                return result;
            }
            private static bool __GeregistreerdeGebruikers_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.GeregistreerdeGebruikers_CanUpdate(ref result);
                return result;
            }
            private static bool __GeregistreerdeGebruikers_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.GeregistreerdeGebruikers_CanDelete(ref result);
                return result;
            }
            private static bool __GeregistreerdeGebruikers_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.GeregistreerdeGebruikers_CanRead(ref result);
                return result;
            }
            private static void __GeregistreerdeGebruikers_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e)
            {
                d.GeregistreerdeGebruikers_Inserting(e);
            }
            private static void __GeregistreerdeGebruikers_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e)
            {
                d.GeregistreerdeGebruikers_Inserted(e);
            }
            private static void __GeregistreerdeGebruikers_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e)
            {
                d.GeregistreerdeGebruikers_Updating(e);
            }
            private static void __GeregistreerdeGebruikers_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e)
            {
                d.GeregistreerdeGebruikers_Updated(e);
            }
            private static void __GeregistreerdeGebruikers_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e)
            {
                d.GeregistreerdeGebruikers_Deleting(e);
            }
            private static void __GeregistreerdeGebruikers_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e)
            {
                d.GeregistreerdeGebruikers_Deleted(e);
            }
            private static void __GeregistreerdeGebruikers_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.GeregistreerdeGebruiker e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.GeregistreerdeGebruikers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.GeregistreerdeGebruiker, bool>> __GeregistreerdeGebruikers_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.GeregistreerdeGebruiker, bool>> filter = null;
                d.GeregistreerdeGebruikers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Podia>
                __PodiasEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Podia>(
                    "Podias",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Podias_Filter);
            private static bool __Podias_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Podias_CanInsert(ref result);
                return result;
            }
            private static bool __Podias_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Podias_CanUpdate(ref result);
                return result;
            }
            private static bool __Podias_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Podias_CanDelete(ref result);
                return result;
            }
            private static bool __Podias_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Podias_CanRead(ref result);
                return result;
            }
            private static void __Podias_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e)
            {
                d.Podias_Inserting(e);
            }
            private static void __Podias_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e)
            {
                d.Podias_Inserted(e);
            }
            private static void __Podias_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e)
            {
                d.Podias_Updating(e);
            }
            private static void __Podias_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e)
            {
                d.Podias_Updated(e);
            }
            private static void __Podias_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e)
            {
                d.Podias_Deleting(e);
            }
            private static void __Podias_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e)
            {
                d.Podias_Deleted(e);
            }
            private static void __Podias_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Podia e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Podias_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Podia, bool>> __Podias_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Podia, bool>> filter = null;
                d.Podias_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.sysdiagram>
                __sysdiagramsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.sysdiagram>(
                    "sysdiagrams",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__sysdiagrams_Filter);
            private static bool __sysdiagrams_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanInsert(ref result);
                return result;
            }
            private static bool __sysdiagrams_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanUpdate(ref result);
                return result;
            }
            private static bool __sysdiagrams_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanDelete(ref result);
                return result;
            }
            private static bool __sysdiagrams_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanRead(ref result);
                return result;
            }
            private static void __sysdiagrams_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Inserting(e);
            }
            private static void __sysdiagrams_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Inserted(e);
            }
            private static void __sysdiagrams_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Updating(e);
            }
            private static void __sysdiagrams_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Updated(e);
            }
            private static void __sysdiagrams_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Deleting(e);
            }
            private static void __sysdiagrams_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Deleted(e);
            }
            private static void __sysdiagrams_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.sysdiagram e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.sysdiagrams_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.sysdiagram, bool>> __sysdiagrams_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.sysdiagram, bool>> filter = null;
                d.sysdiagrams_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Ticket>
                __TicketsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Ticket>(
                    "Tickets",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickets_Filter);
            private static bool __Tickets_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickets_CanInsert(ref result);
                return result;
            }
            private static bool __Tickets_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickets_CanUpdate(ref result);
                return result;
            }
            private static bool __Tickets_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickets_CanDelete(ref result);
                return result;
            }
            private static bool __Tickets_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickets_CanRead(ref result);
                return result;
            }
            private static void __Tickets_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e)
            {
                d.Tickets_Inserting(e);
            }
            private static void __Tickets_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e)
            {
                d.Tickets_Inserted(e);
            }
            private static void __Tickets_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e)
            {
                d.Tickets_Updating(e);
            }
            private static void __Tickets_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e)
            {
                d.Tickets_Updated(e);
            }
            private static void __Tickets_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e)
            {
                d.Tickets_Deleting(e);
            }
            private static void __Tickets_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e)
            {
                d.Tickets_Deleted(e);
            }
            private static void __Tickets_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Tickets_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Ticket, bool>> __Tickets_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Ticket, bool>> filter = null;
                d.Tickets_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Tickettype>
                __TickettypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.Tickettype>(
                    "Tickettypes",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Tickettypes_Filter);
            private static bool __Tickettypes_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickettypes_CanInsert(ref result);
                return result;
            }
            private static bool __Tickettypes_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickettypes_CanUpdate(ref result);
                return result;
            }
            private static bool __Tickettypes_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickettypes_CanDelete(ref result);
                return result;
            }
            private static bool __Tickettypes_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.Tickettypes_CanRead(ref result);
                return result;
            }
            private static void __Tickettypes_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e)
            {
                d.Tickettypes_Inserting(e);
            }
            private static void __Tickettypes_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e)
            {
                d.Tickettypes_Inserted(e);
            }
            private static void __Tickettypes_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e)
            {
                d.Tickettypes_Updating(e);
            }
            private static void __Tickettypes_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e)
            {
                d.Tickettypes_Updated(e);
            }
            private static void __Tickettypes_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e)
            {
                d.Tickettypes_Deleting(e);
            }
            private static void __Tickettypes_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e)
            {
                d.Tickettypes_Deleted(e);
            }
            private static void __Tickettypes_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.Tickettype e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Tickettypes_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Tickettype, bool>> __Tickettypes_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Tickettype, bool>> filter = null;
                d.Tickettypes_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.TickettypesPerFestival>
                __TickettypesPerFestivalsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.groep15_festivalsDataService, global::LightSwitchApplication.TickettypesPerFestival>(
                    "TickettypesPerFestivals",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_CanInsert,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_CanUpdate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_CanDelete,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_CanRead,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Inserting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Inserted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Updating,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Updated,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Deleting,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Deleted,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Validate,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__TickettypesPerFestivals_Filter);
            private static bool __TickettypesPerFestivals_CanInsert(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.TickettypesPerFestivals_CanInsert(ref result);
                return result;
            }
            private static bool __TickettypesPerFestivals_CanUpdate(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.TickettypesPerFestivals_CanUpdate(ref result);
                return result;
            }
            private static bool __TickettypesPerFestivals_CanDelete(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.TickettypesPerFestivals_CanDelete(ref result);
                return result;
            }
            private static bool __TickettypesPerFestivals_CanRead(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                bool result = true;
                d.TickettypesPerFestivals_CanRead(ref result);
                return result;
            }
            private static void __TickettypesPerFestivals_Inserting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e)
            {
                d.TickettypesPerFestivals_Inserting(e);
            }
            private static void __TickettypesPerFestivals_Inserted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e)
            {
                d.TickettypesPerFestivals_Inserted(e);
            }
            private static void __TickettypesPerFestivals_Updating(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e)
            {
                d.TickettypesPerFestivals_Updating(e);
            }
            private static void __TickettypesPerFestivals_Updated(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e)
            {
                d.TickettypesPerFestivals_Updated(e);
            }
            private static void __TickettypesPerFestivals_Deleting(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e)
            {
                d.TickettypesPerFestivals_Deleting(e);
            }
            private static void __TickettypesPerFestivals_Deleted(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e)
            {
                d.TickettypesPerFestivals_Deleted(e);
            }
            private static void __TickettypesPerFestivals_Validate(global::LightSwitchApplication.groep15_festivalsDataService d, global::LightSwitchApplication.TickettypesPerFestival e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.TickettypesPerFestivals_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.TickettypesPerFestival, bool>> __TickettypesPerFestivals_Filter(global::LightSwitchApplication.groep15_festivalsDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.TickettypesPerFestival, bool>> filter = null;
                d.TickettypesPerFestivals_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.groep15_festivalsDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.groep15_festivalsDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.groep15_festivalsDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.groep15_festivalsDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.groep15_festivalsDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.groep15_festivalsDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.groep15_festivalsDataService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.groep15_festivalsDataService>(
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.groep15_festivalsDataService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.groep15_festivalsDataService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.groep15_festivalsDataService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.groep15_festivalsDataService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    #endregion
}
