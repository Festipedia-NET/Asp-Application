

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class Ticket : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the Ticket entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ticket()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ticket(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Ticket> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Ticket.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ticket_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ticket_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int fest_id
        {
            get
            {
                return global::LightSwitchApplication.Ticket.DetailsClass.GetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.fest_id);
            }
            set
            {
                global::LightSwitchApplication.Ticket.DetailsClass.SetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.fest_id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void fest_id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void fest_id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void fest_id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gebr_id
        {
            get
            {
                return global::LightSwitchApplication.Ticket.DetailsClass.GetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.gebr_id);
            }
            set
            {
                global::LightSwitchApplication.Ticket.DetailsClass.SetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.gebr_id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void gebr_id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void gebr_id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void gebr_id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime ticket_datum
        {
            get
            {
                return global::LightSwitchApplication.Ticket.DetailsClass.GetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.ticket_datum);
            }
            set
            {
                global::LightSwitchApplication.Ticket.DetailsClass.SetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.ticket_datum, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ticket_datum_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ticket_datum_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ticket_datum_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Festival Festival
        {
            get
            {
                return global::LightSwitchApplication.Ticket.DetailsClass.GetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Festival);
            }
            set
            {
                global::LightSwitchApplication.Ticket.DetailsClass.SetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Festival, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festival_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festival_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Festival_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.GeregistreerdeGebruiker GeregistreerdeGebruiker
        {
            get
            {
                return global::LightSwitchApplication.Ticket.DetailsClass.GetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.GeregistreerdeGebruiker);
            }
            set
            {
                global::LightSwitchApplication.Ticket.DetailsClass.SetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.GeregistreerdeGebruiker, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruiker_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruiker_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void GeregistreerdeGebruiker_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Tickettype Tickettype
        {
            get
            {
                return global::LightSwitchApplication.Ticket.DetailsClass.GetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Tickettype);
            }
            set
            {
                global::LightSwitchApplication.Ticket.DetailsClass.SetValue(this, global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Tickettype, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettype_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettype_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tickettype_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Ticket,
                global::LightSwitchApplication.Ticket.DetailsClass,
                global::LightSwitchApplication.Ticket.DetailsClass.IImplementation,
                global::LightSwitchApplication.Ticket.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.fest_id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass>.Entry
                __TicketEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass>.Entry(
                    global::LightSwitchApplication.Ticket.DetailsClass.__Ticket_CreateNew,
                    global::LightSwitchApplication.Ticket.DetailsClass.__Ticket_Created,
                    global::LightSwitchApplication.Ticket.DetailsClass.__Ticket_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Ticket __Ticket_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Ticket> es)
            {
                return new global::LightSwitchApplication.Ticket(es);
            }
            private static void __Ticket_Created(global::LightSwitchApplication.Ticket e)
            {
                e.Ticket_Created();
            }
            private static bool __Ticket_AllowSaveWithErrors(global::LightSwitchApplication.Ticket e)
            {
                bool result = false;
                e.Ticket_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Ticket.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int> fest_id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.fest_id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int> gebr_id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.gebr_id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::System.DateTime> ticket_datum
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.ticket_datum) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Festival> Festival
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Festival) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Festival>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.GeregistreerdeGebruiker> GeregistreerdeGebruiker
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.GeregistreerdeGebruiker) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.GeregistreerdeGebruiker>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Tickettype> Tickettype
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Tickettype) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Tickettype>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int fest_id { get; set; }
                new int gebr_id { get; set; }
                new global::System.DateTime ticket_datum { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Festival { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation GeregistreerdeGebruiker { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Tickettype { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Entry
                    fest_id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Entry(
                        "fest_id",
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._fest_id_Stub,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._fest_id_ComputeIsReadOnly,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._fest_id_Validate,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._fest_id_GetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._fest_id_SetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._fest_id_OnValueChanged);
                private static void _fest_id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ticket.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Data> c, global::LightSwitchApplication.Ticket.DetailsClass d, object sf)
                {
                    c(d, ref d._fest_id, sf);
                }
                private static bool _fest_id_ComputeIsReadOnly(global::LightSwitchApplication.Ticket e)
                {
                    bool result = false;
                    e.fest_id_IsReadOnly(ref result);
                    return result;
                }
                private static void _fest_id_Validate(global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.fest_id_Validate(r);
                }
                private static int _fest_id_GetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.ImplementationEntity.fest_id;
                }
                private static void _fest_id_SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d, int v)
                {
                    d.ImplementationEntity.fest_id = v;
                }
                private static void _fest_id_OnValueChanged(global::LightSwitchApplication.Ticket e)
                {
                    e.fest_id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Entry
                    gebr_id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Entry(
                        "gebr_id",
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._gebr_id_Stub,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._gebr_id_ComputeIsReadOnly,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._gebr_id_Validate,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._gebr_id_GetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._gebr_id_SetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._gebr_id_OnValueChanged);
                private static void _gebr_id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ticket.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Data> c, global::LightSwitchApplication.Ticket.DetailsClass d, object sf)
                {
                    c(d, ref d._gebr_id, sf);
                }
                private static bool _gebr_id_ComputeIsReadOnly(global::LightSwitchApplication.Ticket e)
                {
                    bool result = false;
                    e.gebr_id_IsReadOnly(ref result);
                    return result;
                }
                private static void _gebr_id_Validate(global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.gebr_id_Validate(r);
                }
                private static int _gebr_id_GetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.ImplementationEntity.gebr_id;
                }
                private static void _gebr_id_SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d, int v)
                {
                    d.ImplementationEntity.gebr_id = v;
                }
                private static void _gebr_id_OnValueChanged(global::LightSwitchApplication.Ticket e)
                {
                    e.gebr_id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::System.DateTime>.Entry
                    ticket_datum = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::System.DateTime>.Entry(
                        "ticket_datum",
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._ticket_datum_Stub,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._ticket_datum_ComputeIsReadOnly,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._ticket_datum_Validate,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._ticket_datum_GetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._ticket_datum_SetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._ticket_datum_OnValueChanged);
                private static void _ticket_datum_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ticket.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Ticket.DetailsClass d, object sf)
                {
                    c(d, ref d._ticket_datum, sf);
                }
                private static bool _ticket_datum_ComputeIsReadOnly(global::LightSwitchApplication.Ticket e)
                {
                    bool result = false;
                    e.ticket_datum_IsReadOnly(ref result);
                    return result;
                }
                private static void _ticket_datum_Validate(global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ticket_datum_Validate(r);
                }
                private static global::System.DateTime _ticket_datum_GetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.ImplementationEntity.ticket_datum;
                }
                private static void _ticket_datum_SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.ticket_datum = global::LightSwitchApplication.Ticket.DetailsClass.TruncateDate(v);
                }
                private static void _ticket_datum_OnValueChanged(global::LightSwitchApplication.Ticket e)
                {
                    e.ticket_datum_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Festival>.Entry
                    Festival = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Festival>.Entry(
                        "Festival",
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_Stub,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_ComputeIsReadOnly,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_Validate,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_GetCoreImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_GetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_SetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_Refresh,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Festival_OnValueChanged);
                private static void _Festival_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ticket.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Festival>.Data> c, global::LightSwitchApplication.Ticket.DetailsClass d, object sf)
                {
                    c(d, ref d._Festival, sf);
                }
                private static bool _Festival_ComputeIsReadOnly(global::LightSwitchApplication.Ticket e)
                {
                    bool result = false;
                    e.Festival_IsReadOnly(ref result);
                    return result;
                }
                private static void _Festival_Validate(global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Festival_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Festival_GetCoreImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.ImplementationEntity.Festival;
                }
                private static global::LightSwitchApplication.Festival _Festival_GetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Festival, global::LightSwitchApplication.Festival.DetailsClass>(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Festival, ref d._Festival);
                }
                private static void _Festival_SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d, global::LightSwitchApplication.Festival v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Festival, ref d._Festival, (i, ev) => i.Festival = ev, v);
                }
                private static void _Festival_Refresh(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Festival, ref d._Festival);
                }
                private static void _Festival_OnValueChanged(global::LightSwitchApplication.Ticket e)
                {
                    e.Festival_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.GeregistreerdeGebruiker>.Entry
                    GeregistreerdeGebruiker = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.GeregistreerdeGebruiker>.Entry(
                        "GeregistreerdeGebruiker",
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_Stub,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_ComputeIsReadOnly,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_Validate,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_GetCoreImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_GetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_SetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_Refresh,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._GeregistreerdeGebruiker_OnValueChanged);
                private static void _GeregistreerdeGebruiker_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ticket.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.GeregistreerdeGebruiker>.Data> c, global::LightSwitchApplication.Ticket.DetailsClass d, object sf)
                {
                    c(d, ref d._GeregistreerdeGebruiker, sf);
                }
                private static bool _GeregistreerdeGebruiker_ComputeIsReadOnly(global::LightSwitchApplication.Ticket e)
                {
                    bool result = false;
                    e.GeregistreerdeGebruiker_IsReadOnly(ref result);
                    return result;
                }
                private static void _GeregistreerdeGebruiker_Validate(global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.GeregistreerdeGebruiker_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _GeregistreerdeGebruiker_GetCoreImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.ImplementationEntity.GeregistreerdeGebruiker;
                }
                private static global::LightSwitchApplication.GeregistreerdeGebruiker _GeregistreerdeGebruiker_GetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.GeregistreerdeGebruiker, global::LightSwitchApplication.GeregistreerdeGebruiker.DetailsClass>(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.GeregistreerdeGebruiker, ref d._GeregistreerdeGebruiker);
                }
                private static void _GeregistreerdeGebruiker_SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d, global::LightSwitchApplication.GeregistreerdeGebruiker v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.GeregistreerdeGebruiker, ref d._GeregistreerdeGebruiker, (i, ev) => i.GeregistreerdeGebruiker = ev, v);
                }
                private static void _GeregistreerdeGebruiker_Refresh(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.GeregistreerdeGebruiker, ref d._GeregistreerdeGebruiker);
                }
                private static void _GeregistreerdeGebruiker_OnValueChanged(global::LightSwitchApplication.Ticket e)
                {
                    e.GeregistreerdeGebruiker_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Tickettype>.Entry
                    Tickettype = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Tickettype>.Entry(
                        "Tickettype",
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_Stub,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_ComputeIsReadOnly,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_Validate,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_GetCoreImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_GetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_SetImplementationValue,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_Refresh,
                        global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties._Tickettype_OnValueChanged);
                private static void _Tickettype_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ticket.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Tickettype>.Data> c, global::LightSwitchApplication.Ticket.DetailsClass d, object sf)
                {
                    c(d, ref d._Tickettype, sf);
                }
                private static bool _Tickettype_ComputeIsReadOnly(global::LightSwitchApplication.Ticket e)
                {
                    bool result = false;
                    e.Tickettype_IsReadOnly(ref result);
                    return result;
                }
                private static void _Tickettype_Validate(global::LightSwitchApplication.Ticket e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Tickettype_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Tickettype_GetCoreImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.ImplementationEntity.Tickettype;
                }
                private static global::LightSwitchApplication.Tickettype _Tickettype_GetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Tickettype, global::LightSwitchApplication.Tickettype.DetailsClass>(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Tickettype, ref d._Tickettype);
                }
                private static void _Tickettype_SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass d, global::LightSwitchApplication.Tickettype v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Tickettype, ref d._Tickettype, (i, ev) => i.Tickettype = ev, v);
                }
                private static void _Tickettype_Refresh(global::LightSwitchApplication.Ticket.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Ticket.DetailsClass.PropertySetProperties.Tickettype, ref d._Tickettype);
                }
                private static void _Tickettype_OnValueChanged(global::LightSwitchApplication.Ticket e)
                {
                    e.Tickettype_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Data _fest_id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, int>.Data _gebr_id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::System.DateTime>.Data _ticket_datum;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Festival>.Data _Festival;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.GeregistreerdeGebruiker>.Data _GeregistreerdeGebruiker;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Ticket, global::LightSwitchApplication.Ticket.DetailsClass, global::LightSwitchApplication.Tickettype>.Data _Tickettype;
            
        }
    
        #endregion
    }
    
    #endregion
}
