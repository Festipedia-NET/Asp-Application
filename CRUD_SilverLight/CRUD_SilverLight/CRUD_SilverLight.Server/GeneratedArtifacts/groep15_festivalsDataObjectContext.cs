//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_BandsPerFestival_Bands", "Bands", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Band), "BandsPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.BandsPerFestival), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_BandsPerFestival_Festivals", "Festivals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Festival), "BandsPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.BandsPerFestival), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_BandsPerFestival_Podia", "Podia", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Podia), "BandsPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.BandsPerFestival), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_CampingsPerFestival_Campings", "Campings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Camping), "CampingsPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.CampingsPerFestival), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_CampingsPerFestival_Festivals", "Festivals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Festival), "CampingsPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.CampingsPerFestival), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_FacPerCamp_Campings", "Campings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Camping), "FacPerCamp", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.FacPerCamp), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_FacPerCamp_Faciliteiten", "Faciliteiten", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Faciliteiten), "FacPerCamp", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.FacPerCamp), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Tickets_Festivals", "Festivals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Festival), "Tickets", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Ticket), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Tickets_GeregistreerdeGebruikers", "GeregistreerdeGebruikers", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.GeregistreerdeGebruiker), "Tickets", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Ticket), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_Tickets_Tickettypes", "Tickettypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Tickettype), "Tickets", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Ticket), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_TickettypesPerFestival_Festivals", "Festivals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Festival), "TickettypesPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.TickettypesPerFestival), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "FK_TickettypesPerFestival_Tickettypes", "Tickettypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Tickettype), "TickettypesPerFestival", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.TickettypesPerFestival), true)]

#endregion

namespace LightSwitchApplication.Implementation
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class groep15_festivalsData : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new groep15_festivalsData object using the connection string found in the 'groep15_festivalsData' section of the application configuration file.
        /// </summary>
        public groep15_festivalsData() : base("name=groep15_festivalsData", "groep15_festivalsData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new groep15_festivalsData object.
        /// </summary>
        public groep15_festivalsData(string connectionString) : base(connectionString, "groep15_festivalsData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new groep15_festivalsData object.
        /// </summary>
        public groep15_festivalsData(EntityConnection connection) : base(connection, "groep15_festivalsData")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Band> Bands
        {
            get
            {
                if ((_Bands == null))
                {
                    _Bands = base.CreateObjectSet<Band>("Bands");
                }
                return _Bands;
            }
        }
        private ObjectSet<Band> _Bands;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BandsPerFestival> BandsPerFestivals
        {
            get
            {
                if ((_BandsPerFestivals == null))
                {
                    _BandsPerFestivals = base.CreateObjectSet<BandsPerFestival>("BandsPerFestivals");
                }
                return _BandsPerFestivals;
            }
        }
        private ObjectSet<BandsPerFestival> _BandsPerFestivals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Camping> Campings
        {
            get
            {
                if ((_Campings == null))
                {
                    _Campings = base.CreateObjectSet<Camping>("Campings");
                }
                return _Campings;
            }
        }
        private ObjectSet<Camping> _Campings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CampingsPerFestival> CampingsPerFestivals
        {
            get
            {
                if ((_CampingsPerFestivals == null))
                {
                    _CampingsPerFestivals = base.CreateObjectSet<CampingsPerFestival>("CampingsPerFestivals");
                }
                return _CampingsPerFestivals;
            }
        }
        private ObjectSet<CampingsPerFestival> _CampingsPerFestivals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Faciliteiten> Faciliteitens
        {
            get
            {
                if ((_Faciliteitens == null))
                {
                    _Faciliteitens = base.CreateObjectSet<Faciliteiten>("Faciliteitens");
                }
                return _Faciliteitens;
            }
        }
        private ObjectSet<Faciliteiten> _Faciliteitens;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FacPerCamp> FacPerCamps
        {
            get
            {
                if ((_FacPerCamps == null))
                {
                    _FacPerCamps = base.CreateObjectSet<FacPerCamp>("FacPerCamps");
                }
                return _FacPerCamps;
            }
        }
        private ObjectSet<FacPerCamp> _FacPerCamps;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Festival> Festivals
        {
            get
            {
                if ((_Festivals == null))
                {
                    _Festivals = base.CreateObjectSet<Festival>("Festivals");
                }
                return _Festivals;
            }
        }
        private ObjectSet<Festival> _Festivals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GeregistreerdeGebruiker> GeregistreerdeGebruikers
        {
            get
            {
                if ((_GeregistreerdeGebruikers == null))
                {
                    _GeregistreerdeGebruikers = base.CreateObjectSet<GeregistreerdeGebruiker>("GeregistreerdeGebruikers");
                }
                return _GeregistreerdeGebruikers;
            }
        }
        private ObjectSet<GeregistreerdeGebruiker> _GeregistreerdeGebruikers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Podia> Podias
        {
            get
            {
                if ((_Podias == null))
                {
                    _Podias = base.CreateObjectSet<Podia>("Podias");
                }
                return _Podias;
            }
        }
        private ObjectSet<Podia> _Podias;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Ticket> Tickets
        {
            get
            {
                if ((_Tickets == null))
                {
                    _Tickets = base.CreateObjectSet<Ticket>("Tickets");
                }
                return _Tickets;
            }
        }
        private ObjectSet<Ticket> _Tickets;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Tickettype> Tickettypes
        {
            get
            {
                if ((_Tickettypes == null))
                {
                    _Tickettypes = base.CreateObjectSet<Tickettype>("Tickettypes");
                }
                return _Tickettypes;
            }
        }
        private ObjectSet<Tickettype> _Tickettypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TickettypesPerFestival> TickettypesPerFestivals
        {
            get
            {
                if ((_TickettypesPerFestivals == null))
                {
                    _TickettypesPerFestivals = base.CreateObjectSet<TickettypesPerFestival>("TickettypesPerFestivals");
                }
                return _TickettypesPerFestivals;
            }
        }
        private ObjectSet<TickettypesPerFestival> _TickettypesPerFestivals;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Bands EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBands(Band band)
        {
            base.AddObject("Bands", band);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BandsPerFestivals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBandsPerFestivals(BandsPerFestival bandsPerFestival)
        {
            base.AddObject("BandsPerFestivals", bandsPerFestival);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Campings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCampings(Camping camping)
        {
            base.AddObject("Campings", camping);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CampingsPerFestivals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCampingsPerFestivals(CampingsPerFestival campingsPerFestival)
        {
            base.AddObject("CampingsPerFestivals", campingsPerFestival);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Faciliteitens EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFaciliteitens(Faciliteiten faciliteiten)
        {
            base.AddObject("Faciliteitens", faciliteiten);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FacPerCamps EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFacPerCamps(FacPerCamp facPerCamp)
        {
            base.AddObject("FacPerCamps", facPerCamp);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Festivals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFestivals(Festival festival)
        {
            base.AddObject("Festivals", festival);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GeregistreerdeGebruikers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeregistreerdeGebruikers(GeregistreerdeGebruiker geregistreerdeGebruiker)
        {
            base.AddObject("GeregistreerdeGebruikers", geregistreerdeGebruiker);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Podias EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPodias(Podia podia)
        {
            base.AddObject("Podias", podia);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the sysdiagrams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tickets EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTickets(Ticket ticket)
        {
            base.AddObject("Tickets", ticket);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tickettypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTickettypes(Tickettype tickettype)
        {
            base.AddObject("Tickettypes", tickettype);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TickettypesPerFestivals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTickettypesPerFestivals(TickettypesPerFestival tickettypesPerFestival)
        {
            base.AddObject("TickettypesPerFestivals", tickettypesPerFestival);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Band")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Band : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Band object.
        /// </summary>
        /// <param name="band_id">Initial value of the band_id property.</param>
        /// <param name="band_naam">Initial value of the band_naam property.</param>
        /// <param name="band_soortMuziek">Initial value of the band_soortMuziek property.</param>
        public static Band CreateBand(global::System.Int32 band_id, global::System.String band_naam, global::System.String band_soortMuziek)
        {
            Band band = new Band();
            band.band_id = band_id;
            band.band_naam = band_naam;
            band.band_soortMuziek = band_soortMuziek;
            return band;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 band_id
        {
            get
            {
                return _band_id;
            }
            set
            {
                if (_band_id != value)
                {
                    Onband_idChanging(value);
                    ReportPropertyChanging("band_id");
                    _band_id = value;
                    ReportPropertyChanged("band_id");
                    Onband_idChanged();
                }
            }
        }
        private global::System.Int32 _band_id;
        partial void Onband_idChanging(global::System.Int32 value);
        partial void Onband_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String band_naam
        {
            get
            {
                return _band_naam;
            }
            set
            {
                Onband_naamChanging(value);
                ReportPropertyChanging("band_naam");
                _band_naam = value;
                ReportPropertyChanged("band_naam");
                Onband_naamChanged();
            }
        }
        private global::System.String _band_naam;
        partial void Onband_naamChanging(global::System.String value);
        partial void Onband_naamChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String band_soortMuziek
        {
            get
            {
                return _band_soortMuziek;
            }
            set
            {
                Onband_soortMuziekChanging(value);
                ReportPropertyChanging("band_soortMuziek");
                _band_soortMuziek = value;
                ReportPropertyChanged("band_soortMuziek");
                Onband_soortMuziekChanged();
            }
        }
        private global::System.String _band_soortMuziek;
        partial void Onband_soortMuziekChanging(global::System.String value);
        partial void Onband_soortMuziekChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String band_url
        {
            get
            {
                return _band_url;
            }
            set
            {
                Onband_urlChanging(value);
                ReportPropertyChanging("band_url");
                _band_url = value;
                ReportPropertyChanged("band_url");
                Onband_urlChanged();
            }
        }
        private global::System.String _band_url;
        partial void Onband_urlChanging(global::System.String value);
        partial void Onband_urlChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_BandsPerFestival_Bands", "BandsPerFestival")]
        public EntityCollection<BandsPerFestival> BandsPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BandsPerFestival>("LightSwitchApplication.FK_BandsPerFestival_Bands", "BandsPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BandsPerFestival>("LightSwitchApplication.FK_BandsPerFestival_Bands", "BandsPerFestival", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="BandsPerFestival")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BandsPerFestival : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BandsPerFestival object.
        /// </summary>
        /// <param name="fest_id">Initial value of the fest_id property.</param>
        /// <param name="band_id">Initial value of the band_id property.</param>
        /// <param name="datum">Initial value of the datum property.</param>
        /// <param name="uur">Initial value of the uur property.</param>
        /// <param name="pod_id">Initial value of the pod_id property.</param>
        public static BandsPerFestival CreateBandsPerFestival(global::System.Int32 fest_id, global::System.Int32 band_id, global::System.DateTime datum, global::System.TimeSpan uur, global::System.Int32 pod_id)
        {
            BandsPerFestival bandsPerFestival = new BandsPerFestival();
            bandsPerFestival.fest_id = fest_id;
            bandsPerFestival.band_id = band_id;
            bandsPerFestival.datum = datum;
            bandsPerFestival.uur = uur;
            bandsPerFestival.pod_id = pod_id;
            return bandsPerFestival;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fest_id
        {
            get
            {
                return _fest_id;
            }
            set
            {
                if (_fest_id != value)
                {
                    Onfest_idChanging(value);
                    ReportPropertyChanging("fest_id");
                    _fest_id = value;
                    ReportPropertyChanged("fest_id");
                    Onfest_idChanged();
                }
            }
        }
        private global::System.Int32 _fest_id;
        partial void Onfest_idChanging(global::System.Int32 value);
        partial void Onfest_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 band_id
        {
            get
            {
                return _band_id;
            }
            set
            {
                if (_band_id != value)
                {
                    Onband_idChanging(value);
                    ReportPropertyChanging("band_id");
                    _band_id = value;
                    ReportPropertyChanged("band_id");
                    Onband_idChanged();
                }
            }
        }
        private global::System.Int32 _band_id;
        partial void Onband_idChanging(global::System.Int32 value);
        partial void Onband_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime datum
        {
            get
            {
                return _datum;
            }
            set
            {
                if (_datum != value)
                {
                    OndatumChanging(value);
                    ReportPropertyChanging("datum");
                    _datum = value;
                    ReportPropertyChanged("datum");
                    OndatumChanged();
                }
            }
        }
        private global::System.DateTime _datum;
        partial void OndatumChanging(global::System.DateTime value);
        partial void OndatumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan uur
        {
            get
            {
                return _uur;
            }
            set
            {
                OnuurChanging(value);
                ReportPropertyChanging("uur");
                _uur = value;
                ReportPropertyChanged("uur");
                OnuurChanged();
            }
        }
        private global::System.TimeSpan _uur;
        partial void OnuurChanging(global::System.TimeSpan value);
        partial void OnuurChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 pod_id
        {
            get
            {
                return _pod_id;
            }
            set
            {
                Onpod_idChanging(value);
                ReportPropertyChanging("pod_id");
                _pod_id = value;
                ReportPropertyChanged("pod_id");
                Onpod_idChanged();
            }
        }
        private global::System.Int32 _pod_id;
        partial void Onpod_idChanging(global::System.Int32 value);
        partial void Onpod_idChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_BandsPerFestival_Bands", "Bands")]
        public Band Band
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Band>("LightSwitchApplication.FK_BandsPerFestival_Bands", "Bands").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Band>("LightSwitchApplication.FK_BandsPerFestival_Bands", "Bands").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Band> BandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Band>("LightSwitchApplication.FK_BandsPerFestival_Bands", "Bands");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Band>("LightSwitchApplication.FK_BandsPerFestival_Bands", "Bands", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_BandsPerFestival_Festivals", "Festivals")]
        public Festival Festival
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_BandsPerFestival_Festivals", "Festivals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_BandsPerFestival_Festivals", "Festivals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Festival> FestivalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_BandsPerFestival_Festivals", "Festivals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Festival>("LightSwitchApplication.FK_BandsPerFestival_Festivals", "Festivals", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_BandsPerFestival_Podia", "Podia")]
        public Podia Podia
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Podia>("LightSwitchApplication.FK_BandsPerFestival_Podia", "Podia").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Podia>("LightSwitchApplication.FK_BandsPerFestival_Podia", "Podia").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Podia> PodiaReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Podia>("LightSwitchApplication.FK_BandsPerFestival_Podia", "Podia");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Podia>("LightSwitchApplication.FK_BandsPerFestival_Podia", "Podia", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Camping")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Camping : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Camping object.
        /// </summary>
        /// <param name="camp_id">Initial value of the camp_id property.</param>
        /// <param name="camp_adres">Initial value of the camp_adres property.</param>
        /// <param name="camp_cap">Initial value of the camp_cap property.</param>
        public static Camping CreateCamping(global::System.Int32 camp_id, global::System.String camp_adres, global::System.Int32 camp_cap)
        {
            Camping camping = new Camping();
            camping.camp_id = camp_id;
            camping.camp_adres = camp_adres;
            camping.camp_cap = camp_cap;
            return camping;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 camp_id
        {
            get
            {
                return _camp_id;
            }
            set
            {
                if (_camp_id != value)
                {
                    Oncamp_idChanging(value);
                    ReportPropertyChanging("camp_id");
                    _camp_id = value;
                    ReportPropertyChanged("camp_id");
                    Oncamp_idChanged();
                }
            }
        }
        private global::System.Int32 _camp_id;
        partial void Oncamp_idChanging(global::System.Int32 value);
        partial void Oncamp_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String camp_adres
        {
            get
            {
                return _camp_adres;
            }
            set
            {
                Oncamp_adresChanging(value);
                ReportPropertyChanging("camp_adres");
                _camp_adres = value;
                ReportPropertyChanged("camp_adres");
                Oncamp_adresChanged();
            }
        }
        private global::System.String _camp_adres;
        partial void Oncamp_adresChanging(global::System.String value);
        partial void Oncamp_adresChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 camp_cap
        {
            get
            {
                return _camp_cap;
            }
            set
            {
                Oncamp_capChanging(value);
                ReportPropertyChanging("camp_cap");
                _camp_cap = value;
                ReportPropertyChanged("camp_cap");
                Oncamp_capChanged();
            }
        }
        private global::System.Int32 _camp_cap;
        partial void Oncamp_capChanging(global::System.Int32 value);
        partial void Oncamp_capChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_CampingsPerFestival_Campings", "CampingsPerFestival")]
        public EntityCollection<CampingsPerFestival> CampingsPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CampingsPerFestival>("LightSwitchApplication.FK_CampingsPerFestival_Campings", "CampingsPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CampingsPerFestival>("LightSwitchApplication.FK_CampingsPerFestival_Campings", "CampingsPerFestival", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_FacPerCamp_Campings", "FacPerCamp")]
        public EntityCollection<FacPerCamp> FacPerCamps
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FacPerCamp>("LightSwitchApplication.FK_FacPerCamp_Campings", "FacPerCamp");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FacPerCamp>("LightSwitchApplication.FK_FacPerCamp_Campings", "FacPerCamp", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="CampingsPerFestival")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CampingsPerFestival : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CampingsPerFestival object.
        /// </summary>
        /// <param name="fest_id">Initial value of the fest_id property.</param>
        /// <param name="camp_id">Initial value of the camp_id property.</param>
        public static CampingsPerFestival CreateCampingsPerFestival(global::System.Int32 fest_id, global::System.Int32 camp_id)
        {
            CampingsPerFestival campingsPerFestival = new CampingsPerFestival();
            campingsPerFestival.fest_id = fest_id;
            campingsPerFestival.camp_id = camp_id;
            return campingsPerFestival;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fest_id
        {
            get
            {
                return _fest_id;
            }
            set
            {
                if (_fest_id != value)
                {
                    Onfest_idChanging(value);
                    ReportPropertyChanging("fest_id");
                    _fest_id = value;
                    ReportPropertyChanged("fest_id");
                    Onfest_idChanged();
                }
            }
        }
        private global::System.Int32 _fest_id;
        partial void Onfest_idChanging(global::System.Int32 value);
        partial void Onfest_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 camp_id
        {
            get
            {
                return _camp_id;
            }
            set
            {
                if (_camp_id != value)
                {
                    Oncamp_idChanging(value);
                    ReportPropertyChanging("camp_id");
                    _camp_id = value;
                    ReportPropertyChanged("camp_id");
                    Oncamp_idChanged();
                }
            }
        }
        private global::System.Int32 _camp_id;
        partial void Oncamp_idChanging(global::System.Int32 value);
        partial void Oncamp_idChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_CampingsPerFestival_Campings", "Campings")]
        public Camping Camping
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Camping>("LightSwitchApplication.FK_CampingsPerFestival_Campings", "Campings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Camping>("LightSwitchApplication.FK_CampingsPerFestival_Campings", "Campings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Camping> CampingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Camping>("LightSwitchApplication.FK_CampingsPerFestival_Campings", "Campings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Camping>("LightSwitchApplication.FK_CampingsPerFestival_Campings", "Campings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_CampingsPerFestival_Festivals", "Festivals")]
        public Festival Festival
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_CampingsPerFestival_Festivals", "Festivals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_CampingsPerFestival_Festivals", "Festivals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Festival> FestivalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_CampingsPerFestival_Festivals", "Festivals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Festival>("LightSwitchApplication.FK_CampingsPerFestival_Festivals", "Festivals", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Faciliteiten")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Faciliteiten : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Faciliteiten object.
        /// </summary>
        /// <param name="fac_id">Initial value of the fac_id property.</param>
        /// <param name="fac_omschr">Initial value of the fac_omschr property.</param>
        /// <param name="fac_eenhprijs">Initial value of the fac_eenhprijs property.</param>
        public static Faciliteiten CreateFaciliteiten(global::System.Int32 fac_id, global::System.String fac_omschr, global::System.Decimal fac_eenhprijs)
        {
            Faciliteiten faciliteiten = new Faciliteiten();
            faciliteiten.fac_id = fac_id;
            faciliteiten.fac_omschr = fac_omschr;
            faciliteiten.fac_eenhprijs = fac_eenhprijs;
            return faciliteiten;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fac_id
        {
            get
            {
                return _fac_id;
            }
            set
            {
                if (_fac_id != value)
                {
                    Onfac_idChanging(value);
                    ReportPropertyChanging("fac_id");
                    _fac_id = value;
                    ReportPropertyChanged("fac_id");
                    Onfac_idChanged();
                }
            }
        }
        private global::System.Int32 _fac_id;
        partial void Onfac_idChanging(global::System.Int32 value);
        partial void Onfac_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String fac_omschr
        {
            get
            {
                return _fac_omschr;
            }
            set
            {
                Onfac_omschrChanging(value);
                ReportPropertyChanging("fac_omschr");
                _fac_omschr = value;
                ReportPropertyChanged("fac_omschr");
                Onfac_omschrChanged();
            }
        }
        private global::System.String _fac_omschr;
        partial void Onfac_omschrChanging(global::System.String value);
        partial void Onfac_omschrChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal fac_eenhprijs
        {
            get
            {
                return _fac_eenhprijs;
            }
            set
            {
                Onfac_eenhprijsChanging(value);
                ReportPropertyChanging("fac_eenhprijs");
                _fac_eenhprijs = value;
                ReportPropertyChanged("fac_eenhprijs");
                Onfac_eenhprijsChanged();
            }
        }
        private global::System.Decimal _fac_eenhprijs;
        partial void Onfac_eenhprijsChanging(global::System.Decimal value);
        partial void Onfac_eenhprijsChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_FacPerCamp_Faciliteiten", "FacPerCamp")]
        public EntityCollection<FacPerCamp> FacPerCamps
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FacPerCamp>("LightSwitchApplication.FK_FacPerCamp_Faciliteiten", "FacPerCamp");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FacPerCamp>("LightSwitchApplication.FK_FacPerCamp_Faciliteiten", "FacPerCamp", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="FacPerCamp")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FacPerCamp : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FacPerCamp object.
        /// </summary>
        /// <param name="camp_id">Initial value of the camp_id property.</param>
        /// <param name="fac_id">Initial value of the fac_id property.</param>
        /// <param name="aantal">Initial value of the aantal property.</param>
        public static FacPerCamp CreateFacPerCamp(global::System.Int32 camp_id, global::System.Int32 fac_id, global::System.Int32 aantal)
        {
            FacPerCamp facPerCamp = new FacPerCamp();
            facPerCamp.camp_id = camp_id;
            facPerCamp.fac_id = fac_id;
            facPerCamp.aantal = aantal;
            return facPerCamp;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 camp_id
        {
            get
            {
                return _camp_id;
            }
            set
            {
                if (_camp_id != value)
                {
                    Oncamp_idChanging(value);
                    ReportPropertyChanging("camp_id");
                    _camp_id = value;
                    ReportPropertyChanged("camp_id");
                    Oncamp_idChanged();
                }
            }
        }
        private global::System.Int32 _camp_id;
        partial void Oncamp_idChanging(global::System.Int32 value);
        partial void Oncamp_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fac_id
        {
            get
            {
                return _fac_id;
            }
            set
            {
                if (_fac_id != value)
                {
                    Onfac_idChanging(value);
                    ReportPropertyChanging("fac_id");
                    _fac_id = value;
                    ReportPropertyChanged("fac_id");
                    Onfac_idChanged();
                }
            }
        }
        private global::System.Int32 _fac_id;
        partial void Onfac_idChanging(global::System.Int32 value);
        partial void Onfac_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 aantal
        {
            get
            {
                return _aantal;
            }
            set
            {
                OnaantalChanging(value);
                ReportPropertyChanging("aantal");
                _aantal = value;
                ReportPropertyChanged("aantal");
                OnaantalChanged();
            }
        }
        private global::System.Int32 _aantal;
        partial void OnaantalChanging(global::System.Int32 value);
        partial void OnaantalChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_FacPerCamp_Campings", "Campings")]
        public Camping Camping
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Camping>("LightSwitchApplication.FK_FacPerCamp_Campings", "Campings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Camping>("LightSwitchApplication.FK_FacPerCamp_Campings", "Campings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Camping> CampingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Camping>("LightSwitchApplication.FK_FacPerCamp_Campings", "Campings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Camping>("LightSwitchApplication.FK_FacPerCamp_Campings", "Campings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_FacPerCamp_Faciliteiten", "Faciliteiten")]
        public Faciliteiten Faciliteiten
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faciliteiten>("LightSwitchApplication.FK_FacPerCamp_Faciliteiten", "Faciliteiten").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faciliteiten>("LightSwitchApplication.FK_FacPerCamp_Faciliteiten", "Faciliteiten").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Faciliteiten> FaciliteitenReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faciliteiten>("LightSwitchApplication.FK_FacPerCamp_Faciliteiten", "Faciliteiten");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Faciliteiten>("LightSwitchApplication.FK_FacPerCamp_Faciliteiten", "Faciliteiten", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Festival")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Festival : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Festival object.
        /// </summary>
        /// <param name="fest_id">Initial value of the fest_id property.</param>
        /// <param name="fest_naam">Initial value of the fest_naam property.</param>
        /// <param name="fest_locatie">Initial value of the fest_locatie property.</param>
        /// <param name="fest_datum">Initial value of the fest_datum property.</param>
        /// <param name="fest_duur">Initial value of the fest_duur property.</param>
        public static Festival CreateFestival(global::System.Int32 fest_id, global::System.String fest_naam, global::System.String fest_locatie, global::System.DateTime fest_datum, global::System.Int32 fest_duur)
        {
            Festival festival = new Festival();
            festival.fest_id = fest_id;
            festival.fest_naam = fest_naam;
            festival.fest_locatie = fest_locatie;
            festival.fest_datum = fest_datum;
            festival.fest_duur = fest_duur;
            return festival;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fest_id
        {
            get
            {
                return _fest_id;
            }
            set
            {
                if (_fest_id != value)
                {
                    Onfest_idChanging(value);
                    ReportPropertyChanging("fest_id");
                    _fest_id = value;
                    ReportPropertyChanged("fest_id");
                    Onfest_idChanged();
                }
            }
        }
        private global::System.Int32 _fest_id;
        partial void Onfest_idChanging(global::System.Int32 value);
        partial void Onfest_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String fest_naam
        {
            get
            {
                return _fest_naam;
            }
            set
            {
                Onfest_naamChanging(value);
                ReportPropertyChanging("fest_naam");
                _fest_naam = value;
                ReportPropertyChanged("fest_naam");
                Onfest_naamChanged();
            }
        }
        private global::System.String _fest_naam;
        partial void Onfest_naamChanging(global::System.String value);
        partial void Onfest_naamChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String fest_locatie
        {
            get
            {
                return _fest_locatie;
            }
            set
            {
                Onfest_locatieChanging(value);
                ReportPropertyChanging("fest_locatie");
                _fest_locatie = value;
                ReportPropertyChanged("fest_locatie");
                Onfest_locatieChanged();
            }
        }
        private global::System.String _fest_locatie;
        partial void Onfest_locatieChanging(global::System.String value);
        partial void Onfest_locatieChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime fest_datum
        {
            get
            {
                return _fest_datum;
            }
            set
            {
                Onfest_datumChanging(value);
                ReportPropertyChanging("fest_datum");
                _fest_datum = value;
                ReportPropertyChanged("fest_datum");
                Onfest_datumChanged();
            }
        }
        private global::System.DateTime _fest_datum;
        partial void Onfest_datumChanging(global::System.DateTime value);
        partial void Onfest_datumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fest_duur
        {
            get
            {
                return _fest_duur;
            }
            set
            {
                Onfest_duurChanging(value);
                ReportPropertyChanging("fest_duur");
                _fest_duur = value;
                ReportPropertyChanged("fest_duur");
                Onfest_duurChanged();
            }
        }
        private global::System.Int32 _fest_duur;
        partial void Onfest_duurChanging(global::System.Int32 value);
        partial void Onfest_duurChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_BandsPerFestival_Festivals", "BandsPerFestival")]
        public EntityCollection<BandsPerFestival> BandsPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BandsPerFestival>("LightSwitchApplication.FK_BandsPerFestival_Festivals", "BandsPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BandsPerFestival>("LightSwitchApplication.FK_BandsPerFestival_Festivals", "BandsPerFestival", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_CampingsPerFestival_Festivals", "CampingsPerFestival")]
        public EntityCollection<CampingsPerFestival> CampingsPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CampingsPerFestival>("LightSwitchApplication.FK_CampingsPerFestival_Festivals", "CampingsPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CampingsPerFestival>("LightSwitchApplication.FK_CampingsPerFestival_Festivals", "CampingsPerFestival", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Tickets_Festivals", "Tickets")]
        public EntityCollection<Ticket> Tickets
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ticket>("LightSwitchApplication.FK_Tickets_Festivals", "Tickets");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ticket>("LightSwitchApplication.FK_Tickets_Festivals", "Tickets", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_TickettypesPerFestival_Festivals", "TickettypesPerFestival")]
        public EntityCollection<TickettypesPerFestival> TickettypesPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TickettypesPerFestival>("LightSwitchApplication.FK_TickettypesPerFestival_Festivals", "TickettypesPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TickettypesPerFestival>("LightSwitchApplication.FK_TickettypesPerFestival_Festivals", "TickettypesPerFestival", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="GeregistreerdeGebruiker")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GeregistreerdeGebruiker : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GeregistreerdeGebruiker object.
        /// </summary>
        /// <param name="gebr_id">Initial value of the gebr_id property.</param>
        /// <param name="gebr_naam">Initial value of the gebr_naam property.</param>
        /// <param name="gebr_adres">Initial value of the gebr_adres property.</param>
        /// <param name="gebr_gebDat">Initial value of the gebr_gebDat property.</param>
        public static GeregistreerdeGebruiker CreateGeregistreerdeGebruiker(global::System.Int32 gebr_id, global::System.String gebr_naam, global::System.String gebr_adres, global::System.DateTime gebr_gebDat)
        {
            GeregistreerdeGebruiker geregistreerdeGebruiker = new GeregistreerdeGebruiker();
            geregistreerdeGebruiker.gebr_id = gebr_id;
            geregistreerdeGebruiker.gebr_naam = gebr_naam;
            geregistreerdeGebruiker.gebr_adres = gebr_adres;
            geregistreerdeGebruiker.gebr_gebDat = gebr_gebDat;
            return geregistreerdeGebruiker;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 gebr_id
        {
            get
            {
                return _gebr_id;
            }
            set
            {
                if (_gebr_id != value)
                {
                    Ongebr_idChanging(value);
                    ReportPropertyChanging("gebr_id");
                    _gebr_id = value;
                    ReportPropertyChanged("gebr_id");
                    Ongebr_idChanged();
                }
            }
        }
        private global::System.Int32 _gebr_id;
        partial void Ongebr_idChanging(global::System.Int32 value);
        partial void Ongebr_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String gebr_naam
        {
            get
            {
                return _gebr_naam;
            }
            set
            {
                Ongebr_naamChanging(value);
                ReportPropertyChanging("gebr_naam");
                _gebr_naam = value;
                ReportPropertyChanged("gebr_naam");
                Ongebr_naamChanged();
            }
        }
        private global::System.String _gebr_naam;
        partial void Ongebr_naamChanging(global::System.String value);
        partial void Ongebr_naamChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String gebr_adres
        {
            get
            {
                return _gebr_adres;
            }
            set
            {
                Ongebr_adresChanging(value);
                ReportPropertyChanging("gebr_adres");
                _gebr_adres = value;
                ReportPropertyChanged("gebr_adres");
                Ongebr_adresChanged();
            }
        }
        private global::System.String _gebr_adres;
        partial void Ongebr_adresChanging(global::System.String value);
        partial void Ongebr_adresChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime gebr_gebDat
        {
            get
            {
                return _gebr_gebDat;
            }
            set
            {
                Ongebr_gebDatChanging(value);
                ReportPropertyChanging("gebr_gebDat");
                _gebr_gebDat = value;
                ReportPropertyChanged("gebr_gebDat");
                Ongebr_gebDatChanged();
            }
        }
        private global::System.DateTime _gebr_gebDat;
        partial void Ongebr_gebDatChanging(global::System.DateTime value);
        partial void Ongebr_gebDatChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Tickets_GeregistreerdeGebruikers", "Tickets")]
        public EntityCollection<Ticket> Tickets
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ticket>("LightSwitchApplication.FK_Tickets_GeregistreerdeGebruikers", "Tickets");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ticket>("LightSwitchApplication.FK_Tickets_GeregistreerdeGebruikers", "Tickets", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Podia")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Podia : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Podia object.
        /// </summary>
        /// <param name="pod_id">Initial value of the pod_id property.</param>
        /// <param name="pod_omschr">Initial value of the pod_omschr property.</param>
        /// <param name="pod_locatie">Initial value of the pod_locatie property.</param>
        public static Podia CreatePodia(global::System.Int32 pod_id, global::System.String pod_omschr, global::System.String pod_locatie)
        {
            Podia podia = new Podia();
            podia.pod_id = pod_id;
            podia.pod_omschr = pod_omschr;
            podia.pod_locatie = pod_locatie;
            return podia;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 pod_id
        {
            get
            {
                return _pod_id;
            }
            set
            {
                if (_pod_id != value)
                {
                    Onpod_idChanging(value);
                    ReportPropertyChanging("pod_id");
                    _pod_id = value;
                    ReportPropertyChanged("pod_id");
                    Onpod_idChanged();
                }
            }
        }
        private global::System.Int32 _pod_id;
        partial void Onpod_idChanging(global::System.Int32 value);
        partial void Onpod_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String pod_omschr
        {
            get
            {
                return _pod_omschr;
            }
            set
            {
                Onpod_omschrChanging(value);
                ReportPropertyChanging("pod_omschr");
                _pod_omschr = value;
                ReportPropertyChanged("pod_omschr");
                Onpod_omschrChanged();
            }
        }
        private global::System.String _pod_omschr;
        partial void Onpod_omschrChanging(global::System.String value);
        partial void Onpod_omschrChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String pod_locatie
        {
            get
            {
                return _pod_locatie;
            }
            set
            {
                Onpod_locatieChanging(value);
                ReportPropertyChanging("pod_locatie");
                _pod_locatie = value;
                ReportPropertyChanged("pod_locatie");
                Onpod_locatieChanged();
            }
        }
        private global::System.String _pod_locatie;
        partial void Onpod_locatieChanging(global::System.String value);
        partial void Onpod_locatieChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_BandsPerFestival_Podia", "BandsPerFestival")]
        public EntityCollection<BandsPerFestival> BandsPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BandsPerFestival>("LightSwitchApplication.FK_BandsPerFestival_Podia", "BandsPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BandsPerFestival>("LightSwitchApplication.FK_BandsPerFestival_Podia", "BandsPerFestival", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sysdiagram object.
        /// </summary>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="principal_id">Initial value of the principal_id property.</param>
        /// <param name="diagram_id">Initial value of the diagram_id property.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = value;
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = value;
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = value;
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = value;
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = value;
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Ticket")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Ticket : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Ticket object.
        /// </summary>
        /// <param name="fest_id">Initial value of the fest_id property.</param>
        /// <param name="gebr_id">Initial value of the gebr_id property.</param>
        /// <param name="ticket_datum">Initial value of the ticket_datum property.</param>
        /// <param name="typ_id">Initial value of the typ_id property.</param>
        public static Ticket CreateTicket(global::System.Int32 fest_id, global::System.Int32 gebr_id, global::System.DateTime ticket_datum, global::System.Int32 typ_id)
        {
            Ticket ticket = new Ticket();
            ticket.fest_id = fest_id;
            ticket.gebr_id = gebr_id;
            ticket.ticket_datum = ticket_datum;
            ticket.typ_id = typ_id;
            return ticket;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fest_id
        {
            get
            {
                return _fest_id;
            }
            set
            {
                if (_fest_id != value)
                {
                    Onfest_idChanging(value);
                    ReportPropertyChanging("fest_id");
                    _fest_id = value;
                    ReportPropertyChanged("fest_id");
                    Onfest_idChanged();
                }
            }
        }
        private global::System.Int32 _fest_id;
        partial void Onfest_idChanging(global::System.Int32 value);
        partial void Onfest_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 gebr_id
        {
            get
            {
                return _gebr_id;
            }
            set
            {
                if (_gebr_id != value)
                {
                    Ongebr_idChanging(value);
                    ReportPropertyChanging("gebr_id");
                    _gebr_id = value;
                    ReportPropertyChanged("gebr_id");
                    Ongebr_idChanged();
                }
            }
        }
        private global::System.Int32 _gebr_id;
        partial void Ongebr_idChanging(global::System.Int32 value);
        partial void Ongebr_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ticket_datum
        {
            get
            {
                return _ticket_datum;
            }
            set
            {
                Onticket_datumChanging(value);
                ReportPropertyChanging("ticket_datum");
                _ticket_datum = value;
                ReportPropertyChanged("ticket_datum");
                Onticket_datumChanged();
            }
        }
        private global::System.DateTime _ticket_datum;
        partial void Onticket_datumChanging(global::System.DateTime value);
        partial void Onticket_datumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 typ_id
        {
            get
            {
                return _typ_id;
            }
            set
            {
                Ontyp_idChanging(value);
                ReportPropertyChanging("typ_id");
                _typ_id = value;
                ReportPropertyChanged("typ_id");
                Ontyp_idChanged();
            }
        }
        private global::System.Int32 _typ_id;
        partial void Ontyp_idChanging(global::System.Int32 value);
        partial void Ontyp_idChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Tickets_Festivals", "Festivals")]
        public Festival Festival
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_Tickets_Festivals", "Festivals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_Tickets_Festivals", "Festivals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Festival> FestivalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_Tickets_Festivals", "Festivals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Festival>("LightSwitchApplication.FK_Tickets_Festivals", "Festivals", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Tickets_GeregistreerdeGebruikers", "GeregistreerdeGebruikers")]
        public GeregistreerdeGebruiker GeregistreerdeGebruiker
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeregistreerdeGebruiker>("LightSwitchApplication.FK_Tickets_GeregistreerdeGebruikers", "GeregistreerdeGebruikers").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeregistreerdeGebruiker>("LightSwitchApplication.FK_Tickets_GeregistreerdeGebruikers", "GeregistreerdeGebruikers").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeregistreerdeGebruiker> GeregistreerdeGebruikerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeregistreerdeGebruiker>("LightSwitchApplication.FK_Tickets_GeregistreerdeGebruikers", "GeregistreerdeGebruikers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeregistreerdeGebruiker>("LightSwitchApplication.FK_Tickets_GeregistreerdeGebruikers", "GeregistreerdeGebruikers", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Tickets_Tickettypes", "Tickettypes")]
        public Tickettype Tickettype
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tickettype>("LightSwitchApplication.FK_Tickets_Tickettypes", "Tickettypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tickettype>("LightSwitchApplication.FK_Tickets_Tickettypes", "Tickettypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Tickettype> TickettypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tickettype>("LightSwitchApplication.FK_Tickets_Tickettypes", "Tickettypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Tickettype>("LightSwitchApplication.FK_Tickets_Tickettypes", "Tickettypes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Tickettype")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tickettype : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Tickettype object.
        /// </summary>
        /// <param name="typ_id">Initial value of the typ_id property.</param>
        /// <param name="typ_omschr">Initial value of the typ_omschr property.</param>
        /// <param name="typ_prijs">Initial value of the typ_prijs property.</param>
        public static Tickettype CreateTickettype(global::System.Int32 typ_id, global::System.String typ_omschr, global::System.Decimal typ_prijs)
        {
            Tickettype tickettype = new Tickettype();
            tickettype.typ_id = typ_id;
            tickettype.typ_omschr = typ_omschr;
            tickettype.typ_prijs = typ_prijs;
            return tickettype;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 typ_id
        {
            get
            {
                return _typ_id;
            }
            set
            {
                if (_typ_id != value)
                {
                    Ontyp_idChanging(value);
                    ReportPropertyChanging("typ_id");
                    _typ_id = value;
                    ReportPropertyChanged("typ_id");
                    Ontyp_idChanged();
                }
            }
        }
        private global::System.Int32 _typ_id;
        partial void Ontyp_idChanging(global::System.Int32 value);
        partial void Ontyp_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String typ_omschr
        {
            get
            {
                return _typ_omschr;
            }
            set
            {
                Ontyp_omschrChanging(value);
                ReportPropertyChanging("typ_omschr");
                _typ_omschr = value;
                ReportPropertyChanged("typ_omschr");
                Ontyp_omschrChanged();
            }
        }
        private global::System.String _typ_omschr;
        partial void Ontyp_omschrChanging(global::System.String value);
        partial void Ontyp_omschrChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal typ_prijs
        {
            get
            {
                return _typ_prijs;
            }
            set
            {
                Ontyp_prijsChanging(value);
                ReportPropertyChanging("typ_prijs");
                _typ_prijs = value;
                ReportPropertyChanged("typ_prijs");
                Ontyp_prijsChanged();
            }
        }
        private global::System.Decimal _typ_prijs;
        partial void Ontyp_prijsChanging(global::System.Decimal value);
        partial void Ontyp_prijsChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_Tickets_Tickettypes", "Tickets")]
        public EntityCollection<Ticket> Tickets
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ticket>("LightSwitchApplication.FK_Tickets_Tickettypes", "Tickets");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ticket>("LightSwitchApplication.FK_Tickets_Tickettypes", "Tickets", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_TickettypesPerFestival_Tickettypes", "TickettypesPerFestival")]
        public EntityCollection<TickettypesPerFestival> TickettypesPerFestivals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TickettypesPerFestival>("LightSwitchApplication.FK_TickettypesPerFestival_Tickettypes", "TickettypesPerFestival");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TickettypesPerFestival>("LightSwitchApplication.FK_TickettypesPerFestival_Tickettypes", "TickettypesPerFestival", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="TickettypesPerFestival")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TickettypesPerFestival : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TickettypesPerFestival object.
        /// </summary>
        /// <param name="fest_id">Initial value of the fest_id property.</param>
        /// <param name="typ_id">Initial value of the typ_id property.</param>
        /// <param name="aantal">Initial value of the aantal property.</param>
        public static TickettypesPerFestival CreateTickettypesPerFestival(global::System.Int32 fest_id, global::System.Int32 typ_id, global::System.Int32 aantal)
        {
            TickettypesPerFestival tickettypesPerFestival = new TickettypesPerFestival();
            tickettypesPerFestival.fest_id = fest_id;
            tickettypesPerFestival.typ_id = typ_id;
            tickettypesPerFestival.aantal = aantal;
            return tickettypesPerFestival;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 fest_id
        {
            get
            {
                return _fest_id;
            }
            set
            {
                if (_fest_id != value)
                {
                    Onfest_idChanging(value);
                    ReportPropertyChanging("fest_id");
                    _fest_id = value;
                    ReportPropertyChanged("fest_id");
                    Onfest_idChanged();
                }
            }
        }
        private global::System.Int32 _fest_id;
        partial void Onfest_idChanging(global::System.Int32 value);
        partial void Onfest_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 typ_id
        {
            get
            {
                return _typ_id;
            }
            set
            {
                if (_typ_id != value)
                {
                    Ontyp_idChanging(value);
                    ReportPropertyChanging("typ_id");
                    _typ_id = value;
                    ReportPropertyChanged("typ_id");
                    Ontyp_idChanged();
                }
            }
        }
        private global::System.Int32 _typ_id;
        partial void Ontyp_idChanging(global::System.Int32 value);
        partial void Ontyp_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 aantal
        {
            get
            {
                return _aantal;
            }
            set
            {
                OnaantalChanging(value);
                ReportPropertyChanging("aantal");
                _aantal = value;
                ReportPropertyChanged("aantal");
                OnaantalChanged();
            }
        }
        private global::System.Int32 _aantal;
        partial void OnaantalChanging(global::System.Int32 value);
        partial void OnaantalChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_TickettypesPerFestival_Festivals", "Festivals")]
        public Festival Festival
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_TickettypesPerFestival_Festivals", "Festivals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_TickettypesPerFestival_Festivals", "Festivals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Festival> FestivalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Festival>("LightSwitchApplication.FK_TickettypesPerFestival_Festivals", "Festivals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Festival>("LightSwitchApplication.FK_TickettypesPerFestival_Festivals", "Festivals", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "FK_TickettypesPerFestival_Tickettypes", "Tickettypes")]
        public Tickettype Tickettype
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tickettype>("LightSwitchApplication.FK_TickettypesPerFestival_Tickettypes", "Tickettypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tickettype>("LightSwitchApplication.FK_TickettypesPerFestival_Tickettypes", "Tickettypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Tickettype> TickettypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tickettype>("LightSwitchApplication.FK_TickettypesPerFestival_Tickettypes", "Tickettypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Tickettype>("LightSwitchApplication.FK_TickettypesPerFestival_Tickettypes", "Tickettypes", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
